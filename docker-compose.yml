version: '3.8'

services:
  postgres-db:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=flightDB # .NET database
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-init-scripts:/docker-entrypoint-initdb.d # Script to create the second DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d flightDB"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-cache:
    image: redis/redis-stack-server:latest
    container_name: redis_cache
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  dotnet-api:
    build:
      context: .
      dockerfile: dotnet-backend/Dockerfile
    container_name: dotnet_api
    ports:
      - "8081:8080"
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres-db;Port=5432;Database=flightDB;Username=123;Password=123
      - ASPNETCORE_URLS=http://+:8080
      - Redis__ConnectionString=redis-cache:6379
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  go-booking-service:
    build:
      context: ./go-services/booking
      dockerfile: Dockerfile
    container_name: go_booking_service
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://postgres:123@postgres-db:5432/bookingdb?sslmode=disable
    depends_on:
      postgres-db:
        condition: service_healthy

  go-payment-service:
    build:
      context: ./go-services/payment
      dockerfile: Dockerfile
    container_name: go_payment_service
    ports:
      - "8082:8080" # Exposing on 8082 to avoid conflict
    environment:
      - STRIPE_SECRET_KEY=
      - STRIPE_WEBHOOK_SECRET=
      - DOTNET_BACKEND_URL=http://dotnet-api:8080
    depends_on:
      dotnet-api:
        condition: service_healthy

volumes:
  postgres_data:
